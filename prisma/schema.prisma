// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for consistent values
enum Status {
  active
  inactive
  under_maintenance
}

enum VehicleType {
  truck
  trailer
  car
  machinery
}

enum MovementType {
  entry
  exit
}

enum EntryReason {
  load
  unload
  storage
  other
}

enum AuditEventType {
  entry
  exit
  update
  deletion
}

// Main models
model Yard {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(100)
  location     String        @db.VarChar(200)
  maxCapacity  Int
  status       Status
  supervisor   User          @relation(fields: [supervisorId], references: [id])
  supervisorId Int
  createdAt    DateTime      @default(now())
  movements    MovementLog[] // Relationship with logs
  updatedAt    DateTime      @updatedAt

  @@index([location])
  @@index([status])
  @@map("yards")
}

model Driver {
  id               Int       @id @default(autoincrement())
  name             String    @db.VarChar(100)
  licenseNumber    String?   @unique @db.VarChar(50)
  phone            String?   @db.VarChar(20)
  transportCompany String?   @db.VarChar(100)
  licenseExpiry    DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  movements MovementLog[] // Relationship with logs

  @@index([licenseNumber])
  @@map("drivers")
}

model User {
  id                Int           @id @default(autoincrement())
  firstName         String        @db.VarChar(100)
  lastName          String        @db.VarChar(100)
  role              Role          @default(operator)
  email             String        @unique @db.VarChar(255)
  password          String
  supervisedYards   Yard[]
  movementsCaptured MovementLog[] @relation("CapturedMovements")
  evidences         Evidence[] // Relación con evidencias
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([email])
  @@index([role])
  @@map("users")
}

model MovementLog {
  id           Int          @id @default(autoincrement())
  type         MovementType
  reason       EntryReason
  yard         Yard         @relation(fields: [yardId], references: [id])
  yardId       Int
  driver       Driver?      @relation(fields: [driverId], references: [id])
  driverId     Int?
  vehicle      Vehicle?     @relation(fields: [vehicleId], references: [id])
  vehicleId    Int?
  capturedBy   User         @relation(fields: [capturedById], references: [id], name: "CapturedMovements")
  capturedById Int
  evidences    Evidence[] // Relación con evidencias
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([yardId, type])
  @@index([capturedById])
  @@map("movement_logs")
}

model Vehicle {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(100)
  plate         String        @unique @db.VarChar(20) // License plate (unique)
  serialNumber  String        @db.VarChar(50) // Vehicle serial number
  keysDelivered Boolean       @default(false) // Keys handed over
  vin           String?       @unique @db.VarChar(17) // Optional VIN (unique if provided)
  type          VehicleType // From enum
  movements     MovementLog[] // Relationship with logs
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([plate, vin]) // Optimized search
  @@map("vehicles")
}

enum Role {
  admin
  supervisor
  operator
}

model Evidence {
  id          Int          @id @default(autoincrement())
  message     String?
  images      String[] // Array para múltiples imágenes
  createdBy   User         @relation(fields: [createdById], references: [id])
  createdById Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  movement    MovementLog? @relation(fields: [movementId], references: [id])
  movementId  Int?

  @@index([createdById])
  @@index([movementId])
  @@map("evidences")
}
